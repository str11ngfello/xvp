////////////////////////////////////////////////////////////////
//THIS FILE IS AUTOGENERATED. MANUAL MODIFICATIONS WILL BE LOST.
////////////////////////////////////////////////////////////////
#include <xvpsdk.h>

//enumerations for looking up global lua references
enum EEgScScriptBindingsClassType
{
	c_eEgScScriptBindingsClassType__Pool = 0,
	c_eEgScScriptBindingsClassType_XVector2D,
	c_eNumOfEgScScriptBindingsClassType
};

//global lua references
XS32 g_anEgScScriptBindings_ClassTableRefID[c_eNumOfEgScScriptBindingsClassType] = {-1};
XS32 g_anEgScScriptBindings_ClassMetaTableRefID[c_eNumOfEgScScriptBindingsClassType] = {-1};
XS32 g_anEgScScriptBindings_ConstructedObjectMetaTableRefID[c_eNumOfEgScScriptBindingsClassType] = {-1};
XS32 g_anEgScScriptBindings_PoolMaxCount[c_eNumOfEgScScriptBindingsClassType] = {0};
XS32 g_anEgScScriptBindings_PoolCurrentCount[c_eNumOfEgScScriptBindingsClassType] = {0};

//functions for getting the lua reference to each specific class
XS32 XVector2D::nGetClassTableRefID() {return g_anEgScScriptBindings_ClassTableRefID[c_eEgScScriptBindingsClassType_XVector2D];}

//function to check the descendant of a class
XBOOL bIsScriptBindingsDescendant(XS32 nClassTableRefID, XS32 nClassTypeToCheckDescendant)
{
	switch(nClassTypeToCheckDescendant)
	{
		case c_eEgScScriptBindingsClassType_XVector2D:
			if(nClassTableRefID==g_anEgScScriptBindings_ClassTableRefID[c_eEgScScriptBindingsClassType_XVector2D]) return true;
			else return false;
		default:
			return false;
	}
}

//function to check the descendant of a class
XBOOL bCheckExpectedInputClass(lua_State *poLuaState, XS32 nStackIndex, XS32 nExpectedClassType, XBOOL bAllowNull)
{
	EgScScriptedClass *poClass = (EgScScriptedClass*)lua_touserdata(poLuaState, nStackIndex);
	if(!bAllowNull && poClass==NULL)
	{
		return false;
	}
	else if(poClass==NULL || bIsScriptBindingsDescendant(poClass->nGetClassTableRefID(), nExpectedClassType))
	{
		return true;
	}
	return false;
}

class EgScScriptMemberBinding__XVector2D__x
{
	public:
		void vGetMemberData(lua_State *poLuaState, void *objptr, void *value, bool bDebugger=false)
		{
			XVector2D* poObject = (XVector2D*)objptr;
			XF32 fMemberValue = (poObject->*(&XVector2D::x));
			lua_settvnumber(value, fMemberValue);
		}

		void vSetMemberData(lua_State *poLuaState, void *objptr, void *value, bool bDebugger=false)
		{
			LUA_ASSERT(poLuaState, lua_tvtype(poLuaState, value) == LUA_TNUMBER, EgBaBuildMessage("Unexpected parameter type of %s in EgScScriptMemberBinding__XVector2D__x::vSetMemberData", lua_typename(poLuaState, lua_tvtype(poLuaState, value))));
			XVector2D* poObject = (XVector2D*)objptr;
			XF32 fNewValue = (XF32)lua_gettvnumber(value);
			(poObject->*(&XVector2D::x)) = fNewValue;
		}
};

class EgScScriptMemberBinding__XVector2D__y
{
	public:
		void vGetMemberData(lua_State *poLuaState, void *objptr, void *value, bool bDebugger=false)
		{
			XVector2D* poObject = (XVector2D*)objptr;
			XF32 fMemberValue = (poObject->*(&XVector2D::y));
			lua_settvnumber(value, fMemberValue);
		}

		void vSetMemberData(lua_State *poLuaState, void *objptr, void *value, bool bDebugger=false)
		{
			LUA_ASSERT(poLuaState, lua_tvtype(poLuaState, value) == LUA_TNUMBER, EgBaBuildMessage("Unexpected parameter type of %s in EgScScriptMemberBinding__XVector2D__y::vSetMemberData", lua_typename(poLuaState, lua_tvtype(poLuaState, value))));
			XVector2D* poObject = (XVector2D*)objptr;
			XF32 fNewValue = (XF32)lua_gettvnumber(value);
			(poObject->*(&XVector2D::y)) = fNewValue;
		}
};

//global objects for accessing class members
EgScScriptMemberBinding__XVector2D__x g_oEgScScriptMemberBinding__XVector2D__x;
EgScScriptMemberBinding__XVector2D__y g_oEgScScriptMemberBinding__XVector2D__y;

//creates a meta table for a constructed object so the allocation can be deleted when the lua reference is garbage collected
int nCreateConstructedObjectMetaTable(lua_State* poLuaState, lua_CFunction poDeleteFunction)
{
	lua_newtable(poLuaState);
	lua_pushstring(poLuaState, "__gc");
	lua_pushcclosure(poLuaState, poDeleteFunction, 0);
	lua_rawset(poLuaState, -3);
	return lua_ref(poLuaState, true);
}

//creates a meta table for an object with a constructor so the () operator works
int nCreateClassMetaTable(lua_State* poLuaState, lua_CFunction poCreateFunction)
{
	lua_newtable(poLuaState);
	lua_pushstring(poLuaState, "__call");
	lua_pushcclosure(poLuaState, poCreateFunction, 0);
	lua_rawset(poLuaState, -3);
	return lua_ref(poLuaState, true);
}

//callback function for getting the lua ref index for the table belonging to the point
extern "C" int nLuaGetRefIndex(void *pvUserData)
{
	return pvUserData ? ((EgScScriptedClass*)pvUserData)->nGetClassTableRefID() : -1;
}

static int __BIND__XVector2D__new(lua_State *poLuaState)
{
	LUA_ASSERT(poLuaState, lua_gettop(poLuaState) >= 1 && lua_gettop(poLuaState) <= 1, "XVector2D constructor is non-static and expects 0 parameters");
	void* pvUserData = lua_newuserdata(poLuaState, sizeof(XVector2D));
	lua_getref(poLuaState, g_anEgScScriptBindings_ConstructedObjectMetaTableRefID[c_eEgScScriptBindingsClassType_XVector2D]);
	lua_setmetatable(poLuaState, -2);
	new(pvUserData) XVector2D();
	return 1;
}

static int __BIND__XVector2D__delete(lua_State *poLuaState)
{
	void *pvUserData = lua_touserdata(poLuaState, 1);
	((XVector2D*)pvUserData)->~XVector2D();
	return 0;
}

static int __BIND__XVector2D__dot(lua_State *poLuaState)
{
	LUA_ASSERT(poLuaState, lua_gettop(poLuaState) >= 2 && lua_gettop(poLuaState) <= 2, "XVector2D::dot is non-static and expects 1 parameters");
	LUA_ASSERT(poLuaState, bCheckExpectedInputClass(poLuaState, 1, c_eEgScScriptBindingsClassType_XVector2D, false), "Null or wrong class type passed to __BIND__XVector2D__dot");
	XVector2D* poParam1 = (XVector2D*)lua_touserdata(poLuaState, 1);
	LUA_ASSERT(poLuaState, bCheckExpectedInputClass(poLuaState, 2, c_eEgScScriptBindingsClassType_XVector2D, true), "Wrong class type passed to __BIND__XVector2D__dot");
	LUA_ASSERT(poLuaState, lua_type(poLuaState, 2) == LUA_TLIGHTUSERDATA || lua_type(poLuaState, 2) == LUA_TUSERDATA || lua_type(poLuaState, 2) == LUA_TNONE || lua_type(poLuaState, 2) == LUA_TNIL, EgBaBuildMessage("Unexpected parameter type of %s in __BIND__XVector2D__dot", lua_typename(poLuaState, lua_type(poLuaState, 2))));
	XVector2D* poParam2 = (XVector2D*)lua_touserdata(poLuaState, 2);
	XF32 fReturn = poParam1->dot(poParam2);
	lua_pushnumber(poLuaState, fReturn);
	return 1;
}

#ifdef USE_ENGINE_CREATED_LUA_POOLS
//member objects for pools
XVector2D* g_aoEgScScriptBindingsPool_XVector2D = NULL;

//create the lua pool reset function
void vLuaResetPoolCounts()
{
	memset(g_anEgScScriptBindings_PoolCurrentCount, 0, sizeof(XS32)*c_eNumOfEgScScriptBindingsClassType);
}

//create the lua pools
void vCreateLuaPools()
{
	XS32* pnPoolCount = NULL;
	pnPoolCount = EgApApplication::poGetSingleton()->poGetGlobalParameterSet()->pnGetIntParameter("LuaPoolCount_XVector2D");
	if(pnPoolCount && *pnPoolCount>0)
	{
		g_anEgScScriptBindings_PoolCurrentCount[c_eEgScScriptBindingsClassType_XVector2D] = 0;
		g_anEgScScriptBindings_PoolMaxCount[c_eEgScScriptBindingsClassType_XVector2D] = *pnPoolCount;
		g_aoEgScScriptBindingsPool_XVector2D = ENGINE_ALLOCATE_MEMORY(XVector2D[g_anEgScScriptBindings_PoolMaxCount[c_eEgScScriptBindingsClassType_XVector2D]]);
	}
}

//get XVector2D pool object
static int __BIND___Pool__XVector2D(lua_State *poLuaState)
{
	if(g_anEgScScriptBindings_PoolCurrentCount[c_eEgScScriptBindingsClassType_XVector2D] < g_anEgScScriptBindings_PoolMaxCount[c_eEgScScriptBindingsClassType_XVector2D])
	{
		lua_pushlightuserdata(poLuaState, &g_aoEgScScriptBindingsPool_XVector2D[g_anEgScScriptBindings_PoolCurrentCount[c_eEgScScriptBindingsClassType_XVector2D]++]);
		return 1;
	}
	else
	{
		LUA_ASSERT(poLuaState, false, "Ran out of objects in lua pool of XVector2D");
		return __BIND__XVector2D__new(poLuaState);
	}
}


//create the lua pools
void vDestroyLuaPools()
{
	if (g_aoEgScScriptBindingsPool_XVector2D)
	{
		ENGINE_DEALLOCATE_MEMORY_ARRAY(g_aoEgScScriptBindingsPool_XVector2D);
		g_aoEgScScriptBindingsPool_XVector2D = NULL;
	}
}

#endif
//bind functions and classes so they are accessible from the scripting language
void XScriptBindings::vBind(lua_State *poLuaState)
{

	#define lua_name_tableref(L,n,t) (lua_pushstring(L, n), lua_getref(L, t), lua_settable(L, LUA_GLOBALSINDEX))
	#define lua_register_cfunction_tableref(L,n,f,t) (lua_pushcfunction(L, (f)), lua_setfield(L, -2, (n)))
	#define lua_register_enum_tableref(L,n,e,t) (lua_pushinteger(L, (e)), lua_setfield(L, -2, (n)))
	#define lua_register_member_tableref(L,n,m,t) (lua_pushlightuserdata(L, (m)), lua_setfield(L, -2, (n)))
	#define lua_register_class_metatableref(L,mt,t) (lua_getref(L, mt), lua_setmetatable(L, -2))

	//variables used
	XS32 nClassTableRefID = -1;

#ifdef USE_ENGINE_CREATED_LUA_POOLS
	//_Pool
	::vPushHeap(EgBaHeapManager::c_eHeapGlobal);
	vCreateLuaPools();
	::vPopHeap(EgBaHeapManager::c_eHeapGlobal);
	lua_newtable(poLuaState);
	nClassTableRefID = g_anEgScScriptBindings_ClassTableRefID[c_eEgScScriptBindingsClassType__Pool] = lua_ref(poLuaState, true);
	lua_name_tableref(poLuaState, "_Pool", nClassTableRefID);
	lua_getref(poLuaState, nClassTableRefID);
	lua_register_cfunction_tableref(poLuaState, "XVector2D", __BIND___Pool__XVector2D, nClassTableRefID);
	lua_pop(poLuaState, 1);
#endif

	//XVector2D
	lua_newtable(poLuaState);
	nClassTableRefID = g_anEgScScriptBindings_ClassTableRefID[c_eEgScScriptBindingsClassType_XVector2D] = lua_ref(poLuaState, true);
	g_anEgScScriptBindings_ClassMetaTableRefID[c_eEgScScriptBindingsClassType_XVector2D] = nCreateClassMetaTable(poLuaState, __BIND__XVector2D__new);
	g_anEgScScriptBindings_ConstructedObjectMetaTableRefID[c_eEgScScriptBindingsClassType_XVector2D] = nCreateConstructedObjectMetaTable(poLuaState, __BIND__XVector2D__delete);
	lua_name_tableref(poLuaState, "XVector2D", nClassTableRefID);
	lua_getref(poLuaState, nClassTableRefID);
	lua_register_class_metatableref(poLuaState, g_anEgScScriptBindings_ClassMetaTableRefID[c_eEgScScriptBindingsClassType_XVector2D], nClassTableRefID);
	lua_register_member_tableref(poLuaState, "x", &g_oEgScScriptMemberBinding__XVector2D__x, nClassTableRefID);
	lua_register_member_tableref(poLuaState, "y", &g_oEgScScriptMemberBinding__XVector2D__y, nClassTableRefID);
	lua_register_cfunction_tableref(poLuaState, "new", __BIND__XVector2D__new, nClassTableRefID);
	lua_register_cfunction_tableref(poLuaState, "dot", __BIND__XVector2D__dot, nClassTableRefID);
	lua_pop(poLuaState, 1);
#ifdef INCLUDE_LUA_DEBUGGER_SUPPORT
	poVM->BindNativeTypeForDebugging("XVector2D", typeid(XVector2D).raw_name());
#endif // INCLUDE_LUA_DEBUGGER_SUPPORT
}

//cleanup
void XScriptBindings::vUnbind()
{
#ifdef USE_ENGINE_CREATED_LUA_POOLS
	vDestroyLuaPools();
#endif
}
