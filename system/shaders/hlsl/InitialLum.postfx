#include "XVPShader.hfx"

#define LUMINANCE_VECTOR float3( 0.2125f, 0.7154f, 0.0721f )

//*****************************************************************************
//*****************************************************************************
struct PS_INPUT
{
    float4 position         : SV_Position;
    float2 texCoord0	    : TEXCOORD0;
};


struct PS_OUTPUT
{
    float4 v4Color : SV_TARGET;  // Pixel color
};

Texture2D diffuseMap : register(t0);
SamplerState MeshTextureSampler : register(s0);


cbuffer NodeConstants : register(USER_SLOT0)
{
	float4 g_v4SampleOffsets[MAX_SAMPLES] : packoffset(c0);
	float4 g_v4SampleWeights[MAX_SAMPLES] : packoffset(c16);
};


PS_OUTPUT mainPS( PS_INPUT input )
{
    PS_OUTPUT output      = (PS_OUTPUT)0;
    const int NUM_SAMPLES = 9;
    float     fSum        = 0.0f;

    for( int i = 0; i < NUM_SAMPLES; i++ )
    {
        // Compute the sum of log( luminance ) throughout the sample points
        float3 v3Color    = diffuseMap.Sample(MeshTextureSampler,input.texCoord0 + g_v4SampleOffsets[i].xy ).rgb;
        float  fLuminance = dot( v3Color, LUMINANCE_VECTOR );
        
        fSum += log( fLuminance + 0.0001f );
    }
    
    // Divide the sum to complete the average
    fSum /= NUM_SAMPLES;

    output.v4Color = float4( fSum, fSum, fSum, 1.0f );
    
    return( output );
}